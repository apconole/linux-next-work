How Things Work in Kernel Package Land
======================================

*BEWARE*: This document is for internal use only and potentially contains
          information not suited for people outside Red Hat.

This is Red Hat's internal kernel package dist-git repository which is mainly
used by build systems to prepare (S)RPMs for distribution. Its content is
completely auto-generated by scripts in the actual kernel development
repositories on git.app.eng.bos.redhat.com. Kernel trees of different RHEL
streams are kept in separate repositories, but the naming scheme is
standardized:

For Y-stream: git://git.app.eng.bos.redhat.com/rhel<X>.git
For Z-stream: git://git.app.eng.bos.redhat.com/rhel-<X>.<Y>.z.git

So e.g. current RHEL7 kernel sources live in:

git://git.app.eng.bos.redhat.com/rhel7.git

similar for current RHEL6.9 kernel sources:

git://git.app.eng.bos.redhat.com/rhel-6.9.z.git

For anything that's beyond just compiling RPMs, it is strongly advised to work
on top of the Red Hat kernel repositories instead of the dist-git repository.


Red Hat Kernel Repository Layout
--------------------------------

The Red Hat kernel repositories look just like upstream ones - in fact, they are
based upon a release commit in Linus' git with custom commits on top. These
contain backported changes from upstream as well as an extensive enhancement to
the build system which provides additional 'make' targets.

To hook into the vanilla build system, a trick is used: If 'make' is called
without specifying the Makefile to use, it searches for it using a list of
well-known file names. Since the name 'makefile' appears before 'Makefile' in
that list, it can be used to override the vanilla build system entry point -
which is just what was done here. For Red Hat specific 'make' targets (prefixed
'rh-' or 'rhg-'), 'make' is called recursively with parameter '-C redhat' (to
change into that directory at startup) - for everything else, the original
'Makefile' is simply included.

The above mentioned top-level directory named 'redhat' contains custom
Makefiles and facilitating shell scripts, RHEL kernel configs, Red Hat internal
documentation, kABI whitelists, cryptographic keys for secureboot and module
signing and miscellaneous other things.


Basic Usage Of Kernel Development Repositories
----------------------------------------------

*WARNING*: Kernel images/RPMs created using below instructions are not
	   necessarily allowed to be installed at customer site due to
	   embargos. If in doubt, assume they are confidential!

The kernel build system can be used just like for upstream kernels, so commands
like 'make tags', 'make && make install modules_install' should work just as
expected. On top of that, a number of 'rh-' prefixed targets are available.
'make rh-help' provides a short description of what is in there.

* First step, preparing RHEL kernel configs:

  This step is required only when attempting a local compile using vanilla build
  system. The alternatives given below take care of that already.

  % make rh-configs

  This will merge configs from redhat/configs/ into configs/, so to apply e.g.
  x86_64 RHEL config, it just has to be copied over:

  % cp configs/kernel-3.10.0-x86_64.config .config

* Second (optional) step, setting a localversion:

  % echo '.my_kernel_build' >localversion

  The content of this file is appended to the kernel version string and also
  becomes part of the RPM name, etc.

* Third step, compiling the kernel:

  Multiple options are available here. The most basic one is a local build of
  all binary RPMs:

  % make rh-rpms

  Alternatively, a brew build may be triggered:

  % make rh-brew

* Final step, clean up after build:

  % make rh-clean


Working With Patches
--------------------

In order to build a kernel with custom changes, workflow is just like with
upstream kernel repositories: Apply them to the source tree, then compile using
'make' or 'make rh-rpms'. In order to build in brew, the changes must be
committed first.

When it comes to submitting patches for inclusion into RHEL, there is an
excellent document in redhat/docs/ named RHELPatchRules which explains the
required commit message format in high detail. Once these requirements are met,
the patch may be sent to rhkernel-list@redhat.com for review.


How Dist-Git Is Being Updated
-----------------------------

*Note*: This is RHEL kernel maintainer work, so nothing regular users/developers
        should ever have to cope with.

The majority of the scripts in redhat/ directory are there to provide for this
semi-automatic update of dist-git repository. The entrance point is 'rh-rtg'
target in redhat/Makefile: it lists 'rh-release' target as dependency and
explicitly makes 'rh-release-tag' and 'rh-dist-git' targets. Here is what each
of them does:

rh-release:
- Update version numbers in redhat/Makefile.common.
- Prepare an updated kernel.spec file using the template at
  redhat/kernel.spec.template.
- Update the spec file's changelog with commits since last release.
- Commit the changes to tracked files.
- Create a tarball from current source tree.

rh-release-tag:
- Create an annotated git tag named after the new kernel package version.

rh-dist-git:
- Clone dist-git repository.
- Copy prepared files over to clone.
- Upload created tarball using 'rhpkg upload'.
- Create diff between dist-git and redhat/rpm/SOURCES (which holds the prepared
  files) for review (this diff should usually be empty).
- Extract the top-most changelog entry and collect BZ numbers into a file for
  use as dist-git commit message.
