= Speculation Control =

== How to detect if the CPU supports Speculation Control ==

When the first CPU boots or after a microcode update, if the CPU has
speculation control capabilities these lines are printed:

	FEATURE SPEC_CTRL Present
	FEATURE IBPB_SUPPORT Present

If speculation control is missing these lines are printed:

	FEATURE SPEC_CTRL Not Present
	FEATURE IBPB_SUPPORT Not Present

Some CPUs only have IBPB_SUPPORT in which case this will be printed:

	FEATURE SPEC_CTRL Not Present
	FEATURE IBPB_SUPPORT Present

Some CPUs can only disable IBP but have no IBRS/IBPB support in which case
these lines are printed and a special use_ibp_disable mode is
used.

	FEATURE SPEC_CTRL Present (Implicit)
	FEATURE IBPB_SUPPORT Present (Implicit)

== How to tune Speculation Control ==

There is one main control knob:

/sys/kernel/debug/x86/ibrs_enabled

The is also a read-only informational debugfs entry:

/sys/kernel/debug/x86/ibpb_enabled (read-only)

If the features aren't present, both are set to 0 and ibrs_enabled
cannot be changed.

If the features are present the ibrs_enabled and ibpb_enabled show the
current kernel usage of the respective feature.

When IBRS is enabled, it means IBP (Indirect Branch Prediction)
restricted speculation and it slowdown the CPU significantly.

ibrs_enabled 0: Disabled

ibrs_enabled 1: IBRS enabled in kernel mode.

		Kernel is protected from userland and guest
                mode. Userland is not protected from guest mode. User
                mode isn't protected from other user mode running in a
                sibling hyperthread.

		requires SPEC_CTRL present

ibrs_enabled 2: IBRS enabled in user mode and kernel mode. Only guest
	        can disable IBRS.

		Kernel and usermode are both protected. This protects
		userland from hyperthreading effects and from guest
		mode too.

		requires SPEC_CTRL present

ibpb_enabled 0: Disabled

ibpb_enabled 1: IBPB IBP barrier is used to flush the IBP across mm
                switches (if next task has not enough credentials to
                read the memory of the prev task by other means) and
                across guest mode switches. This protects user and
                guest mode against user and guest mode.

		This doesn't protect against hyperthreading and
                simultaneous multithreading effects.

		This option is read-only.  It is automatically selected
		when ibrs_enabled is 1 or 2.

		requires IBPB_SUPPORT present
